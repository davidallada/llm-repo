stages:
  - backup
  - build
  - deploy

variables:
  DOCKER_BUILDKIT: 1

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - /cache/kaniko
  - /cache/pip
  - /cache/apt
  policy: pull-push

backup-repo:
  stage: backup
  image: alpine
  script:
    - apk add --no-cache tar
    - echo "Backing up repo to NFS share..."
    - mkdir -p "/mnt/container_registry/gitlab-repositories-backup/${CI_PROJECT_NAME}"
    - tar -czf "/mnt/container_registry/gitlab-repositories-backup/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}-$(date +%Y%m%d-%H%M)-${CI_COMMIT_SHORT_SHA}.tar.gz" .
  only:
    - main  # or your desired branch
  dependencies: []  # This avoids pulling artifacts from previous jobs
  tags:
    - gitlab-backup
  before_script:
    - echo "Mounting NFS volume..."
    - mount -t nfs 10.69.1.251:/volume1/container_registry/gitlab-repositories-backup /mnt/container_registry/gitlab-repositories-backup
    - echo "NFS volume mounted at /mnt/container_registry/gitlab-repositories-backup"
  after_script:
    - umount /mnt/container_registry/gitlab-repositories-backup
docker-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /cache
    - mkdir -p /kaniko/.docker
    - mkdir -p /cache/kaniko
    - mkdir -p /cache/pip
    - mkdir -p /cache/apt
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script: |
    VERSION="v$(date +%Y.%m.%d).${CI_PIPELINE_IID}"
    echo "Building Docker image with version: $VERSION"
    /kaniko/executor \
      --context "${CI_PROJECT_DIR}/docker" \
      --dockerfile "${CI_PROJECT_DIR}/docker/Dockerfile" \
      --destination "${CI_REGISTRY_IMAGE}:${VERSION}" \
      --destination "${CI_REGISTRY_IMAGE}:latest" \
      --target tabbyapi-exllamav2-builder-image-runtime \
      --cache=false \
      --cache-repo="${CI_REGISTRY_IMAGE}/cache" \
      --cache-dir=/cache \
      --cache-copy-layers \
      --compressed-caching=false \
      --use-new-run \
      --ignore-path=/cache \
      --ignore-path=/tmp \
      --ignore-path=**/*.pyc \
      --ignore-path=**/__pycache__ \
      --ignore-path=**/.pytest_cache \
      --ignore-path=/cache/pip/* \
      --ignore-path=/cache/apt/* \
      --cleanup
  variables:
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/cache/pip
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/cache/apt
  rules:
    - if: '$CI_COMMIT_BRANCH'
      exists:
        - docker/Dockerfile

trigger-webhook:
  stage: deploy
  image:
    name: ubuntu:20.04
    entrypoint: [ "" ]
  before_script:
    - apt-get update && apt-get install wget -y
  script:
    - wget --post-data="" "https://portainer.rancher.devguy.dev/api/stacks/webhooks/9d87571d-679f-4bec-ab84-b6457333003c"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  needs:
    - job: docker-build
      artifacts: false
